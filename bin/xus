#!/bin/bash

# this uses socat and jshon

STATE=$HOME/.xus/state

usage() {
    cat <<EOF
$(basename $1) <command> [<options>]

COMMANDS
list
start <name> [-s <addr>] [-e <expr>]...    start a xus instance
stop <name>                                stop a xus instance
run <name> <command> [<arg>]...            run command in context of named xus instance
clean <name> | -a                          clear info for one or all xus instances
get [-a] <name> <key>                      get a value, -a means include children
set <name> <key> <value>                   set a value
put <name> <key> <index> <value>           set the value of a key in a variable
insert <name> <key> <index> <value>        insert a value into an array
removeFirst <name> <key> <value>           remove first occurrence of value from array
removeAll <name> <key> <value>             remove all occurrences of value from array
EOF
    exit 1
}

checkState() {
    if [ ! -e $STATE ]; then
        echo Error: no state file
        exit 1
    fi
}

listServer() {
    echo $1 $(echo $2 | jshon -e address -u) $(echo $2 | jshon -e port -u)
}

removeEntry() {
    if [ -e $STATE ]; then
        st=$(<$STATE)
        if [ -n "$st" ]; then
            echo $st | jshon -e servers -d $1 -p > $STATE
        fi
    fi
}

getPort() {
    state="$(<$STATE)"
    if [ -n "$state" ]; then
        echo "$state" | jshon -e servers -e "$1" -e port
    fi
}

showVars() {
    read line <&3
    if [ -n "$line" ]; then
        line="$(echo $line | jshon -e 0 -d 0 -d 0 -d 0 -d 0)"
        while [ $(echo $line | jshon -l) != 0 ]; do
            echo $(echo $line | jshon -e 0 -u -p -e 1)
            line=$(echo $line | jshon -d 0 -d 0)
        done
    fi
}

inc() {
    xus="$1"
    name="$2"
    key="$3"
    read line
    if [ -n "$line" ]; then
        while [ $(echo $line | jshon -l) != 0 ]; do
            set $(echo $line | jshon -e 0 -e 1 -u -p -e 2)
            if [ "$1" = "$key" ]; then
                new=$(expr $2 + 1)
                echo set "$key" = $new
                $xus set "$name" "$key" $new
                return
            fi
            line=$(echo $line | jshon -d 0)
        done
    fi
}

wsConnect() {
    echo -e 'GET /cmd HTTP/1.1\r' >&4
    echo -e 'Upgrade: socket\r' >&4
    echo -e 'Connection: Upgrade\r' >&4
    echo -e '\r' >&4
    read line <&3
    echo $line
}

runCmd() {
    if [ ! -e $STATE ]; then
        echo $1 is not running.
        exit
    fi
    export XUS_SERVER="$1"
    export XUS_PORT=$(getPort "$1")
    if [ -n "$XUS_PORT" ]; then
        shift
        socat TCP:localhost:$XUS_PORT "EXEC:$*,nofork,fdin=3,fdout=4"
    fi
}

subCmd() {
    cmd="$1"
    server="$2"
    shift 2
    runCmd $server "$0" chain-ws "$0" "$cmd" "$@"
}

cmd="$1"
if [ $# != 0 ]; then
    shift
fi
case "$cmd" in
list)
        if [ ! -e $STATE ]; then
            exit
        fi
        state="$(<$STATE)"
        if [ -n "$state" ]; then
            servers=$(echo $state | jshon -e servers)
            for server in $(echo $servers | jshon -k); do
                listServer $server "$(echo $servers | jshon -e $server)"
            done
        fi
;;
start)
        name=$1
        shift
        node --no-deprecation -e "xus = require('./lib/main.js'); xus.run()" $name "$@"
        if [ $? != 2 ]; then
            removeEntry $name
        fi
;;
stop)
        echo stop not implemented, yet
        exit 1
;;
clean)
        if [ -z "$1" ]; then
            usage
        elif [ ! -e $STATE ]; then
            exit
        fi
        state="$(<$STATE)"
        if [ -n "$state" ]; then
            if [ "$1" = -a ]; then
                echo $state | jshon -d servers -n object -i servers > $STATE
            else
                echo $state | jshon -e servers -d "$1" -p > $STATE
            fi
        fi
;;
run)
        if [ -z "$2" ]; then
            usage
        fi
        server="$1"
        shift
        runCmd $server "$0" chain-ws "$@"
;;
set)
        if [ -z "$3" ]; then
            usage
        fi
        subCmd set-cmd "$@"
;;
get)
        if [ -z "$2" ]; then
            usage
        fi
        subCmd get-cmd "$@"
        ;;
chain-ws)
        export XUS_PEER="$(wsConnect | jshon -e 0 -e 1 -u)"
        exec "$@"
;;
set-cmd)
        cat <<EOF >&4
[["set", "$1", $2]]
EOF
;;
get-cmd)
        if [ "$2" = -a ]; then
            tree=true
            shift
        else
            tree=false
        fi
        cat <<EOF >&4
[["value", "$1", null, $tree]]
EOF
        showVars
;;
put)
;;
insert)
;;
removeFirst)
;;
removeAll)
;;
*) usage $0
;;
esac
