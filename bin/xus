#!/bin/bash

#set -x

# this uses socat and jshon

STATE=$HOME/.xus/state

usage() {
    cat <<EOF
$(basename $1) <command> [<options>]

COMMANDS
list
start <name> [-s <addr>] [-e <expr>]...   start a xus instance
stop <name>                               stop a xus instance
run <name> <command> [<arg>]...           run command in context of named xus instance
clean <name> | -a                         clear info for one or all xus instances
get [-a] [-v] <name> <key>...             get a value, -a means include children, -v means value only
set <name> <key> <value>                  set a value
listen <name> <key>...                    listen for keys
put <name> <key> <index> <value>          set the value of a key in a variable
insert <name> <key> <index> <value>       insert a value into an array
removeFirst <name> <key> <value>          remove first occurrence of value from array
removeAll <name> <key> <value>            remove all occurrences of value from array
EOF
    exit 1
}

checkState() {
    if [ ! -e $STATE ]; then
        echo Error: no state file
        exit 1
    fi
}

listServer() {
    echo $1 $(echo "$2" | jshon -e address -u) $(echo "$2" | jshon -e port -u)
}

removeEntry() {
    if [ -e $STATE ]; then
        st=$(<$STATE)
        if [ -n "$st" ]; then
            echo "$st" | jshon -e servers -d $1 -p > $STATE
        fi
    fi
}

getPort() {
    state="$(<$STATE)"
    if [ -n "$state" ]; then
        echo "$state" | jshon -e servers -e "$1" -e port
    fi
}

showBatches() {
    while true; do
        read -r batch <&3
        if [ -z "$batch" ]; then break; fi
        while [ $(echo "$batch" | jshon -l) != 0 ]; do
            msg="$(echo "$batch" | jshon -e 0)"
            if [ "$(echo "$msg" | jshon -e 0 -u)" = value ]; then
                msg="$(echo "$msg" | jshon -d 0 -d 0 -d 0 -d 0)"
                while [ "$(echo "$msg" | jshon -l)" != 0 ]; do
                    showBatch "[\"set\", $(echo "$msg" | jshon -e 0), $(echo "$msg" | jshon -e 1)]" $*
                    msg="$(echo "$msg" | jshon -d 0 -d 0)"
                done
            else
                showBatch "$(echo "$batch" | jshon -e 0)" $*
            fi
            batch=$(echo "$batch" | jshon -d 0)
        done
    done
}

showBatch() {
    if [ "$(echo "$1" | jshon -e 0 -u)" = set ]; then
        key=$(echo "$1" | jshon -e 1 -u)
        value=$(echo "$1" | jshon -e 2 -u)
        while [ $# != 1 ]; do
            shift
            if expr "$key" : "$1\\|$1/.*" >/dev/null; then
                echo $key $value
                return
            fi
        done
    fi
}

showVars() {
    read -r batch <&3
    echo "$batch" > /tmp/lastbatch
    if [ "$1" = -v ]; then
        key=false
        shift
    else
        key=true
    fi
    while [ $(echo "$batch" | jshon -l) != 0 ]; do
        line="$(echo "$batch" | jshon -e 0 -d 0 -d 0 -d 0 -d 0)"
        while [ $(echo "$line" | jshon -l) != 0 ]; do
            if [ "$key" = true ]; then
                echo -n "$(echo "$line" | jshon -e 0 -u) "
            fi
            echo "$line" | jshon -e 1
            line=$(echo "$line" | jshon -d 0 -d 0)
        done
        batch=$(echo "$batch" | jshon -d 0)
    done
}

inc() {
    xus="$1"
    name="$2"
    key="$3"
    read -r line
    if [ -n "$line" ]; then
        while [ $(echo "$line" | jshon -l) != 0 ]; do
            set $(echo "$line" | jshon -e 0 -e 1 -u -p -e 2)
            if [ "$1" = "$key" ]; then
                new=$(expr $2 + 1)
                echo set "$key" = $new
                $xus set "$name" "$key" $new
                return
            fi
            line=$(echo "$line" | jshon -d 0)
        done
    fi
}

wsConnect() {
    echo -e 'GET /cmd HTTP/1.1\r' >&4
    echo -e 'Upgrade: socket\r' >&4
    echo -e 'Connection: Upgrade\r' >&4
    echo -e '\r' >&4
    read -r line <&3
    echo "$line"
}

close() {
    exec 3>&-
    exec 4>&-
}

runCmd() {
    if [ ! -e $STATE ]; then
        echo $1 is not running.
        exit
    fi
    export XUS_SERVER="$1"
    export XUS_PORT=$(getPort "$1")
    if [ -n "$XUS_PORT" ]; then
        shift
        socat TCP:localhost:$XUS_PORT "EXEC:$*,nofork,fdin=3,fdout=4"
    fi
}

subCmd() {
    cmd="$1"
    server="$2"
    shift 2
    runCmd $server "$0" chain-ws "$0" "$cmd" "$@"
}

cmd="$1"
if [ $# != 0 ]; then
    shift
fi
case "$cmd" in
list)
        if [ ! -e $STATE ]; then
            exit
        fi
        state="$(<$STATE)"
        if [ -n "$state" ]; then
            servers=$(echo "$state" | jshon -e servers)
            for server in $(echo "$servers" | jshon -k); do
                listServer $server "$(echo "$servers" | jshon -e $server)"
            done
        fi
;;
start)
        name=$1
        shift
        node --no-deprecation -e "xus = require('./lib/main.js'); xus.run()" $name "$@"
        if [ $? != 2 ]; then
            removeEntry $name
        fi
;;
stop)
        echo stop not implemented, yet
        exit 1
;;
clean)
        if [ -z "$1" ]; then
            usage
        elif [ ! -e $STATE ]; then
            exit
        fi
        state="$(<$STATE)"
        if [ -n "$state" ]; then
            if [ "$1" = -a ]; then
                echo "$state" | jshon -d servers -n object -i servers > $STATE
            else
                echo "$state" | jshon -e servers -d "$1" -p > $STATE
            fi
        fi
;;
run)
        if [ -z "$2" ]; then
            usage
        fi
        server="$1"
        shift
        runCmd $server "$0" chain-ws "$@"
;;
set) [ -n "$3" ] && subCmd send-cmd "$1" '[["set", "'$2'", '$3']]' || usage
;;
put) [ -n "$3" ] && subCmd send-cmd "$1" '[["put", "'$2'", '$3', "'$4'"]]' || usage
;;
splice)
        echo splice not implemented, yet
;;
get) [ -n "$2" ] && subCmd get-cmd "$@" || usage
;;
listen) [ -n "$2" ] && subCmd listen-cmd "$@" || usage
;;
removeFirst)
;;
removeAll)
;;
chain-ws)
        export XUS_PEER="$(wsConnect | jshon -e 0 -e 2 -u)"
        exec "$@"
;;
send-cmd)
        echo "$*" >&4
        close
;;
get-cmd)
        if [ "$1" = -a ]; then
            tree=true
            shift
        else
            tree=false
        fi
        echo -n '[' >&4
        args="$*"
        prefix=''
        while [ $# != 0 ]; do
            echo -n $prefix'["value", "'$1'", null, '$tree']' >&4
            prefix=", "
            shift
        done
        echo ']' >&4
        showVars $args
        close
;;
listen-cmd)
        if [ "$1" = -m ]; then
            master='["set", "this/master", true], '
            shift 2
        else
            master=''
        fi
        echo -n '['$master'["set", "this/listen", [' >&4
        prefix=''
        keys="$*"
        while [ $# != 0 ]; do
            echo -n $prefix'"'$1'"' >&4
            prefix=", "
            shift
        done
        echo ']]]' >&4
        showBatches $keys
;;
*) usage $0
;;
esac
