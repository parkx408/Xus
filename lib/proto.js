// Generated by CoffeeScript 1.3.3
(function() {
  var Server, caresAbout, cmds, error_bad_connection, error_bad_message, error_bad_storage_mode, error_duplicate_peer_name, error_variable_not_array, error_variable_not_object, exports, prefixes, setCmds, storageModes, storage_memory, storage_permanent, storage_transient, warning_no_storage, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = module.exports = require('./base');

  require('./transport');

  _ = require('./lodash.min');

  cmds = ['name', 'value', 'set', 'put', 'insert', 'remove', 'removeFirst', 'removeAll'];

  exports.setCmds = setCmds = ['set', 'put', 'insert', 'removeFirst', 'removeAll'];

  warning_no_storage = 'warning_no_storage';

  error_bad_message = 'error_bad_message';

  error_bad_storage_mode = 'error_bad_storage_mode';

  error_variable_not_object = 'error_variable_not_object';

  error_variable_not_array = 'error_variable_not_array';

  error_bad_connection = 'error_bad_connection';

  error_duplicate_peer_name = 'error_duplicate_peer_name';

  storage_memory = 'memory';

  storage_transient = 'transient';

  storage_permanent = 'permanent';

  storageModes = [storage_transient, storage_memory, storage_permanent];

  exports.Server = Server = (function() {

    function Server() {}

    Server.prototype.connections = [];

    Server.prototype.peers = {};

    Server.prototype.values = {};

    Server.prototype.keys = [];

    Server.prototype.newKeys = false;

    Server.prototype.storageModes = {};

    Server.prototype.anonymousPeerCount = 0;

    Server.prototype.processBatch = function(con, batch) {
      var c, msg, _i, _j, _len, _len1, _ref, _results;
      for (_i = 0, _len = batch.length; _i < _len; _i++) {
        msg = batch[_i];
        this.processMsg(con, msg, msg);
      }
      if (this.newKeys) {
        this.newKeys = false;
        this.keys.sort();
      }
      if (this.newListens) {
        this.setListens(con);
        this.newListens = false;
      }
      _ref = this.connections;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        c = _ref[_j];
        _results.push(c.send());
      }
      return _results;
    };

    Server.prototype.processMsg = function(con, _arg, msg) {
      var c, isSetter, key, name, _i, _len, _ref;
      name = _arg[0], key = _arg[1];
      console.log("PROCESS " + msg);
      if (con.isConnected()) {
        if (__indexOf.call(cmds, name) >= 0) {
          isSetter = __indexOf.call(setCmds, name) >= 0;
          if (typeof key === 'string') {
            key = msg[1] = key.replace(/^this/, "peer/" + con.name);
          }
          if (isSetter && key === con.listenPath) {
            this.newListens = true;
          }
          if ((this[name](con, msg, msg)) && isSetter) {
            console.log("KEY: " + key + ", msg: " + (JSON.stringify(msg)) + ", relevant connections: " + (this.relevantConnections(c, prefixes(key))));
            _ref = this.relevantConnections(c, prefixes(key));
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              c = _ref[_i];
              console.log("adding " + (JSON.stringify(msg)) + " to " + c.name);
              c.addCmd(msg);
            }
            if (this.storageModes[key] === storage_permanent) {
              return this.store(con, key, value);
            }
          }
        } else {
          return this.disconnect(con, error_bad_message, "Unknown command, '" + name + "' in message: " + (JSON.stringify(msg)));
        }
      }
    };

    Server.prototype.relevantConnections = function(con, keyPrefixes) {
      return _.filter(this.connections, function(c) {
        return c !== con && caresAbout(c, keyPrefixes);
      });
    };

    Server.prototype.addConnection = function(con) {
      con.name = "$anonymous-" + (this.anonymousPeerCount++);
      console.log("ADDED CONNECTION: " + con.name);
      con.listening = {};
      con.peerPath = "peer/" + con.name;
      con.listenPath = "" + con.peerPath + "/listen";
      this.peers[con.name] = con;
      this.connections.push(con);
      this.values[con.listenPath] = [];
      return this.values["" + con.peerPath + "/name"] = con.name;
    };

    Server.prototype.renamePeerVars = function(oldName, newName) {
      var key, newPrefix, oldPrefix, oldPrefixPat, _i, _len, _ref;
      console.log("old values: " + (JSON.stringify(this.values)));
      oldPrefix = "peer/" + oldName;
      oldPrefixPat = new RegExp("^peer/" + oldName);
      newPrefix = "peer/" + newName;
      _ref = this.keysForPrefix(oldPrefix);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        this.values[key.replace(oldPrefixPat, newPrefix)] = this.values[key];
        delete this.values[key];
      }
      return console.log("new values: " + (JSON.stringify(this.values)));
    };

    Server.prototype.disconnect = function(con, errorType, msg) {
      var idx, key, peerKey, peerKeys, _i, _len;
      console.log("*\n* DISCONNECT: " + msg + "\n*");
      idx = this.connections.indexOf(con);
      if (idx > -1) {
        peerKey = "peer/" + con.name;
        peerKeys = this.keysForPrefix(peerKey);
        if (con.name) {
          delete this.peers[con.name];
        }
        for (_i = 0, _len = peerKeys.length; _i < _len; _i++) {
          key = peerKeys[_i];
          this.removeKey(key);
        }
        this.connections.splice(idx, 1);
        if (msg) {
          this.error(con, errorType, msg);
        }
        con.send();
        con.close();
      }
      return false;
    };

    Server.prototype.setListens = function(con) {
      var old, path, _i, _len, _ref, _results;
      old = con.listening;
      con.listening = {};
      console.log("Setting listens, name: " + con.name + ", old: " + old + ", listenPath: " + con.listenPath + ", new: " + this.values[con.listenPath]);
      _ref = this.values[con.listenPath];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        con.listening[path] = true;
        if (_.all(prefixes(path), (function(p) {
          return !old[p];
        }))) {
          this.sendTree(con, path, ['value', path, null, true]);
        }
        _results.push(old[path] = true);
      }
      return _results;
    };

    Server.prototype.error = function(con, errorType, msg) {
      con.addCmd(['error', errorType, msg]);
      return false;
    };

    Server.prototype.removeKey = function(key) {
      var idx;
      delete this.storageModes[key];
      delete this.values[key];
      idx = _.search(key, this.keys);
      if (idx > -1) {
        return this.keys.splice(idx, 1);
      }
    };

    Server.prototype.keysForPrefix = function(prefix) {
      var idx, keys, prefixPattern;
      keys = [];
      idx = _.search(prefix, this.keys);
      if (idx > -1) {
        console.log("Getting all keys for prefix: " + prefix + ", start: " + idx + ", keys: " + (this.keys.join(', ')));
        prefixPattern = "^" + prefix + "/";
        if (this.values[prefix] != null) {
          keys.push(prefix);
        }
        while (this.keys[++idx] && this.keys[idx].match(prefixPattern)) {
          if (this.values[prefix] != null) {
            keys.push(this.keys[idx]);
          }
        }
      }
      return keys;
    };

    Server.prototype.sendTree = function(con, path, cmd) {
      var key, _i, _len, _ref;
      console.log("Keys for " + path + " = " + (this.keysForPrefix(path)));
      console.log("All keys: " + (this.keys.join(', ')));
      _ref = this.keysForPrefix(path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        cmd.push(key, this.values[key]);
      }
      return con.addCmd(cmd);
    };

    Server.prototype.store = function(con, key, value) {
      return this.error(con, warning_no_storage, "Can't store " + key + " = " + (JSON.stringify(value)) + ", because no storage is configured");
    };

    Server.prototype.remove = function(con, key) {
      return this.error(con, warning_no_storage, "Can't delete " + key + ", because no storage is configured");
    };

    Server.prototype.name = function(con, _arg) {
      var name, x;
      x = _arg[0], name = _arg[1];
      if (!(name != null)) {
        this.disconnect(con, error_bad_message, "No name given in name message");
      } else if (this.peers[name]) {
        this.disconnect(con, error_duplicate_peer_name, "Duplicate peer name: " + name);
      } else {
        delete this.peers[con.name];
        this.renamePeerVars(con.name, name);
        con.setName(name);
        this.peers[name] = con;
      }
      return true;
    };

    Server.prototype.value = function(con, _arg, cmd) {
      var cookie, key, tree, x;
      x = _arg[0], key = _arg[1], cookie = _arg[2], tree = _arg[3];
      console.log("value cmd: " + (JSON.stringify(cmd)));
      if (tree) {
        return this.sendTree(con, key, cmd);
      } else {
        console.log("not tree");
        if (this.values[key] != null) {
          cmd.push(key, this.values[key]);
        }
        console.log("pushing cmd: " + cmd);
        return con.addCmd(cmd);
      }
    };

    Server.prototype.set = function(con, _arg) {
      var key, storageMode, value, x;
      x = _arg[0], key = _arg[1], value = _arg[2], storageMode = _arg[3];
      if (storageMode && storageModes.indexOf(storageMode) === -1) {
        return this.error(con, error_bad_storage_mode, "" + storageMode + " is not a valid storage mode");
      } else {
        if (storageMode && storageMode !== this.storageModes[key] && this.storageModes[key] === storage_permanent) {
          this.remove(con, key);
        }
        if ((storageMode || this.storageModes[key]) !== storage_transient) {
          if (!this.storageModes[key]) {
            storageMode = storageMode || storage_memory;
            this.keys.push(key);
            this.newKeys = true;
            console.log("Added key: " + key + ", unsorted keys: " + (this.keys.join(', ')));
          }
          console.log("Setting " + key + " = " + value);
          this.values[key] = value;
        }
        if (storageMode) {
          this.storageModes[key] = storageMode;
        }
        return true;
      }
    };

    Server.prototype.put = function(con, _arg) {
      var index, key, value, x;
      x = _arg[0], key = _arg[1], value = _arg[2], index = _arg[3];
      if (!this.values[key] || typeof this.values[key] !== 'object') {
        return this.disconnect(con, error_variable_not_object, "Can't put with " + key + " because it is not an object");
      } else {
        this.values[key][index] = value;
        return true;
      }
    };

    Server.prototype.insert = function(con, _arg) {
      var index, key, value, x;
      x = _arg[0], key = _arg[1], value = _arg[2], index = _arg[3];
      if (!(this.values[key] instanceof Array)) {
        return this.disconnect(con, error_variable_not_array, "Can't insert into " + key + " because it is not an array");
      } else {
        if (index < 0) {
          index = this.values.length + index + 1;
        }
        this.values[key].splice(index, 0, value);
        return true;
      }
    };

    Server.prototype.removeFirst = function(con, _arg) {
      var idx, key, val, value, x;
      x = _arg[0], key = _arg[1], value = _arg[2];
      if (!(this.values[key] instanceof Array)) {
        return this.disconnect(con, error_variable_not_array, "Can't insert into " + key + " because it is not an array");
      } else {
        val = this.values[key];
        idx = val.indexOf(value);
        if (idx > -1) {
          val.splice(idx, 1);
        }
        return true;
      }
    };

    Server.prototype.removeAll = function(con, _arg) {
      var idx, key, val, value, x;
      x = _arg[0], key = _arg[1], value = _arg[2];
      if (!(this.values[key] instanceof Array)) {
        return this.disconnect(con, error_variable_not_array, "Can't insert into " + key + " because it is not an array");
      } else {
        val = this.values[key];
        while ((idx = val.indexOf(value)) > -1) {
          val.splice(idx, 1);
        }
        return true;
      }
    };

    return Server;

  })();

  caresAbout = function(con, keyPrefixes) {
    var result;
    result = _.any(keyPrefixes, function(p) {
      return con.listening[p];
    });
    console.log("con " + con.name + " " + (result ? 'cares about' : 'does not care about') + " " + keyPrefixes + ", listen: " + (JSON.stringify(con.listening)));
    return result;
  };

  prefixes = function(key) {
    var result, splitKey;
    result = [];
    splitKey = _.without(key.split('/'), '');
    while (splitKey.length) {
      result.push(splitKey.join('/'));
      splitKey.pop();
    }
    return result;
  };

  _.search = function(key, arr) {
    var left, mid, right;
    if (arr.length === 0) {
      return 0;
    }
    left = 0;
    right = arr.length - 1;
    while (left < right) {
      mid = Math.floor((left + right) / 2);
      if (arr[mid] === key) {
        return mid;
      } else if (arr[mid] < key) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    if (arr[left] < key) {
      return left + 1;
    } else {
      return left;
    }
  };

}).call(this);
