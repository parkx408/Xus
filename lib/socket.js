// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, SocketConnection, exports, net, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Connection = (exports = module.exports = require('./proto')).Connection;

  net = require('net');

  _ = require('./lodash.min');

  exports.startSocketServer = function(xusServer, host, port, ready) {
    var context, server;
    context = {
      connections: []
    };
    server = net.createServer(function(c) {
      return context.connections.push(new SocketConnection(xusServer, context, c));
    });
    xusServer.socketServer = server;
    if (port) {
      return server.listen(port, host, ready);
    } else {
      return server.listen(ready);
    }
  };

  SocketConnection = (function(_super) {

    __extends(SocketConnection, _super);

    function SocketConnection(server, context, con) {
      var _this = this;
      this.server = server;
      this.context = context;
      this.con = con;
      SocketConnection.__super__.constructor.call(this, this.server);
      this.con.on('data', function(data) {
        return _this.newData(data);
      });
      this.con.on('error', function(hadError) {
        return _this.server.disconnect(_this);
      });
      this.con.on('close', function(hadError) {
        return _this.server.disconnect(_this);
      });
      this.server.addConnection(this);
    }

    SocketConnection.prototype.connected = true;

    SocketConnection.prototype.write = function(str) {
      console.log("CONNECTION WRITING: " + str);
      return this.con.write(str);
    };

    SocketConnection.prototype.close = function() {
      try {
        this.con.destroy();
      } catch (err) {
        console.log("Error closing connection: " + err.stack);
      }
      return this.context.connections = _.without(this.context.connections, this.con);
    };

    return SocketConnection;

  })(Connection);

}).call(this);
