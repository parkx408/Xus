// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, SocketConnection, exports, net, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Connection = (exports = module.exports = require('./proto')).Connection;

  net = require('net');

  _ = require('./lodash.min');

  exports.startSocketServer = function(xusServer, port, host, ready) {
    var context, server;
    context = {
      connections: []
    };
    server = net.createServer(function(c) {
      return context.connections.push(new Connection(xusServer, context, c));
    });
    xusServer.socketServer = server;
    if (port) {
      server.listen(port, host, ready);
    } else {
      server.listen(ready);
    }
    return this;
  };

  SocketConnection = (function(_super) {

    __extends(SocketConnection, _super);

    function SocketConnection(server, context, con) {
      var _this = this;
      this.server = server;
      this.context = context;
      this.con = con;
      this.con.on('data', function(data) {
        var msgs;
        msgs = (_this.saved + data).split('\n');
        if (data[data.length - 1] !== '\n') {
          _this.saved = msgs.pop();
        }
        return _this.server.processMessages(_this, _.map(msgs, function(m) {
          try {
            return JSON.parse(m);
          } catch (err) {
            return ['error', m];
          }
        }));
      });
    }

    SocketConnection.prototype.connected = true;

    SocketConnection.prototype.dump = function() {
      if (this.connected && this.q.length) {
        this.con.write(JSON.stringify(this.q));
        return this.q = [];
      }
    };

    SocketConnection.prototype.disconnect = function() {
      this.connected = false;
      this.con.close();
      this.q = null;
      return this.context.connections = this.context.connections.without(this.con);
    };

    return SocketConnection;

  })(Connection);

}).call(this);
