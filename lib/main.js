// Generated by CoffeeScript 1.3.3
(function() {
  var Server, exports, parseAddr, path, pfs, run, setup, startSocketServer, state, stateFd, usage, _ref;

  _ref = exports = module.exports = require('./socket'), Server = _ref.Server, startSocketServer = _ref.startSocketServer;

  pfs = require('./pfs');

  path = require('path');

  usage = function(args) {
    console.log("Usage: node " + args[1] + " name [-p port]");
    return process.exit();
  };

  stateFd = null;

  state = null;

  setup = function(cont) {
    var stateFile, xusDir;
    try {
      xusDir = path.join(process.env.HOME, '.xus');
      stateFile = path.join(xusDir, 'state');
      return pfs.stat(xusDir).fail(function() {
        return pfs.mkdir(xusDir);
      }).then(function() {
        return pfs.open(stateFile, 'a+');
      }).then(function(fd) {
        return pfs.flock((stateFd = fd), 'ex');
      }).then(function() {
        return pfs.readFile(stateFd);
      }).then(function(s) {
        return (cont || function() {})(s);
      }).end();
    } catch (err) {
      return console.log("Error: " + err.stack);
    }
  };

  run = function() {
    console.log("ARGS: " + (process.argv.join(' ')));
    return setup(function(s) {
      var args, host, i, name, port, socketAddr, webSocketAddr, xusServer, _ref1;
      socketAddr = null;
      webSocketAddr = null;
      state = (s && JSON.parse(s)) || {
        servers: {}
      };
      i = 2;
      args = process.argv;
      if (i > args.length) {
        usage(args);
      }
      name = args[1];
      if (state.servers[name]) {
        console.log("Error: there is already a server named " + name);
        return process.exit(2);
      } else {
        while (i < args.length) {
          switch (args[i]) {
            case '-s':
              socketAddr = args[++i] || ':';
              break;
            case '-w':
              webSocketAddr = args[++i] || ':';
          }
          i++;
        }
        xusServer = new Server();
        if (socketAddr) {
          _ref1 = parseAddr(socketAddr), host = _ref1[0], port = _ref1[1];
          startSocketServer(xusServer, host, port, function() {
            console.log("Server " + name + " started on port: " + (xusServer.socketServer.address().port));
            state.servers[name] = xusServer.socketServer.address();
            state.servers[name].pid = process.pid;
            return pfs.truncate(stateFd, 0).then(function() {
              return pfs.writeFile(stateFd, JSON.stringify(state));
            }).then(function() {
              return pfs.close(stateFd);
            }).end();
          });
        }
        if (webSocketAddr) {
          return console.log('webSocket server not implmented, yet');
        }
      }
    });
  };

  parseAddr = function(addr) {
    var host, parts, port, _ref1;
    _ref1 = parts = addr.split(':'), host = _ref1[0], port = _ref1[1];
    if (parts.length > 2) {
      throw new Error("Bad address format, expected [host:]port, but got " + addr);
    }
    return (port && [host || null, port]) || [null, host || null];
  };

  exports.run = run;

  exports.setup = setup;

}).call(this);
