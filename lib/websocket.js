// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, ProxyMux, SocketConnection, WebSocketConnection, badPage, exports, fileDir, handler, path, pfs, ws, xusPath, _, _ref;

  exports = module.exports = require('./base');

  _ref = require('./transport'), ProxyMux = _ref.ProxyMux, SocketConnection = _ref.SocketConnection, WebSocketConnection = _ref.WebSocketConnection, Connection = _ref.Connection;

  ws = require('ws');

  _ = require('./lodash.min');

  pfs = require('./pfs');

  path = require('path');

  exports.startWebSocketServer = function(host, port, ready) {
    var app;
    app = require('http').createServer(handler);
    if (port) {
      app.listen(port, host, ready);
    } else {
      app.listen(ready);
    }
    return app;
  };

  fileDir = "" + (path.resolve(path.dirname(path.dirname(process.argv[1])))) + "/examples/";

  xusPath = "" + (path.resolve(path.dirname(path.dirname(process.argv[1])))) + "/xus.js";

  handler = function(req, res) {
    var file, pfx;
    pfx = new RegExp('^/file/');
    if (req.url.match(pfx) || req.url === '/xus.js') {
      file = req.url === '/xus.js' ? xusPath : path.resolve(req.url.replace(pfx, fileDir));
      if (file.match("^" + fileDir) || file === xusPath) {
        pfs.open(file, 'r').then(function(fd) {
          return pfs.readFile(fd);
        }).then(function(s) {
          res.writeHead(200);
          return res.end(s);
        }).fail(function() {
          return badPage(req, res);
        }).end();
        return;
      }
    }
    return badPage(req, res);
  };

  badPage = function(req, res) {
    res.writeHead(404);
    return res.end("<html><body>Web page " + req.url + " not available</body></html>");
  };

  exports.connectXus = function(xusServer, httpServer) {
    var wServer;
    xusServer.webSocketServer = httpServer;
    wServer = new ws.Server({
      noServer: true
    });
    return httpServer.on('upgrade', function(req, socket, head) {
      if (req.url === '/cmd') {
        return new SocketConnection(xusServer, socket, head);
      } else if (req.url === '/peer') {
        return wServer.handleUpgrade(req, socket, head, function(con) {
          return new WebSocketConnection(xusServer, con);
        });
      } else {
        return con.destroy();
      }
    });
  };

  exports.connectProxy = function(httpServer) {
    var proxy, wServer;
    proxy = new ProxyMux({
      processBatch: function(con, demuxedBatch) {
        proxy.verbose("proxy sending: " + (JSON.stringify(demuxedBatch)) + " to " + con.constructor.name);
        return con.send(demuxedBatch);
      }
    });
    wServer = new ws.Server({
      noServer: true
    });
    httpServer.on('upgrade', function(req, socket, head) {
      proxy.verbose("REQUEST: " + req.url);
      if (req.url === '/cmd') {
        return proxy.newSocketEndpoint(function(proxyCon) {
          return new SocketConnection(proxyCon, socket, head);
        });
      } else if (req.url === '/proxy') {
        return wServer.handleUpgrade(req, socket, head, function(con) {
          return new WebSocketConnection(proxy, con);
        });
      } else {
        return con.destroy();
      }
    });
    return proxy;
  };

}).call(this);
