// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, SimpleCon, StandardCon, exports, handler, path, pfs, ws, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = module.exports = require('./base');

  Connection = require('./transport').Connection;

  ws = require('ws');

  _ = require('./lodash.min');

  pfs = require('./pfs');

  path = require('path');

  exports.startWebSocketServer = function(host, port, ready) {
    var app;
    app = require('http').createServer(handler);
    if (port) {
      app.listen(port, host, ready);
    } else {
      app.listen(ready);
    }
    return app;
  };

  handler = function(req, res) {
    var file, pfx;
    pfx = new RegExp('^/file/');
    if (req.url.match(pfx)) {
      file = req.url.replace(pfx, "" + (path.resolve(path.dirname(path.dirname(process.argv[1])))) + "/html/");
      return pfs.open(file, 'r').then(function(fd) {
        return pfs.readFile(fd);
      }).then(function(s) {
        res.writeHead(200);
        return res.end(s);
      }).end();
    }
  };

  exports.connectXus = function(xusServer, httpServer) {
    var context, wServer;
    context = {
      connections: []
    };
    xusServer.webSocketServer = httpServer;
    wServer = new ws.Server({
      noServer: true
    });
    return httpServer.on('upgrade', function(req, socket, head) {
      return new (req.url.match('^/cmd') && SimpleCon || StandardCon)(xusServer, context, socket, head, wServer, req);
    });
  };

  SimpleCon = (function(_super) {

    __extends(SimpleCon, _super);

    function SimpleCon(server, context, con, data) {
      var _this = this;
      this.server = server;
      this.context = context;
      this.con = con;
      SimpleCon.__super__.constructor.call(this, this.server, null, data.toString());
      this.con.on('data', function(data) {
        return _this.newData(data);
      });
      this.con.on('end', function(hadError) {
        return _this.server.disconnect(_this);
      });
      this.con.on('close', function(hadError) {
        return _this.server.disconnect(_this);
      });
      this.con.on('error', function(hadError) {
        return _this.server.disconnect(_this);
      });
      this.server.addConnection(this);
    }

    SimpleCon.prototype.connected = true;

    SimpleCon.prototype.write = function(str) {
      return this.con.write(str);
    };

    SimpleCon.prototype.basicClose = function() {
      try {
        this.con.end();
      } catch (err) {
        console.log("Error closing connection: " + err.stack);
      }
      return this.context.connections = _.without(this.context.connections, this.con);
    };

    return SimpleCon;

  })(Connection);

  StandardCon = (function(_super) {

    __extends(StandardCon, _super);

    function StandardCon(server, context, sock, data, wServer, req) {
      var _this = this;
      this.server = server;
      this.context = context;
      StandardCon.__super__.constructor.call(this, this.server);
      wServer.handleUpgrade(req, sock, data, function(con) {
        _this.con = con;
        _this.con.on('message', function(data) {
          return _this.newData(data);
        });
        _this.con.on('end', function(hadError) {
          return _this.server.disconnect(_this);
        });
        _this.con.on('close', function(hadError) {
          return _this.server.disconnect(_this);
        });
        _this.con.on('error', function(hadError) {
          return _this.server.disconnect(_this);
        });
        return _this.server.addConnection(_this);
      });
    }

    StandardCon.prototype.connected = true;

    StandardCon.prototype.write = function(str) {
      return this.con.send(str);
    };

    StandardCon.prototype.basicClose = function() {
      try {
        this.con.terminate();
      } catch (err) {
        console.log("Error closing connection: " + err.stack);
      }
      return this.context.connections = _.without(this.context.connections, this.con);
    };

    return StandardCon;

  })(Connection);

}).call(this);
