// Generated by CoffeeScript 1.3.3
(function() {
  var addFile, addFiles, curDir, fs, listFiles, path, requestFile, xus;

  xus = require('./peer');

  fs = require('fs');

  path = require('path');

  curDir = null;

  module.exports.main = function(master) {
    return fs.realpath(process.cwd(), function(err, pth) {
      var peer;
      curDir = path.normalize(pth);
      peer = master.newPeer();
      peer.listen('this/public/storage', function(key, value) {
        console.log("GOT REQUEST: " + (key.replace(/^peer\/[^/]\/public\/storage\/(.*)$/, '$1')) + ", " + value);
        switch (key.replace(/^peer\/[^/]*\/public\/storage\/(.*)$/, '$1')) {
          case 'request':
            return requestFile(peer, value);
          case 'list':
            return listFiles(peer, value);
        }
      });
      return peer.set('this/links', ['leisure/storage']);
    });
  };

  requestFile = function(peer, _arg) {
    var file, id, responseKey;
    responseKey = _arg[0], id = _arg[1], file = _arg[2];
    if (responseKey.match(/^peer\/[^/]\/public/) || !responseKey.match(/^peer\//)) {
      return fs.realpath(path.resolve(curDir, file), function(err, pth) {
        if (!err && path.normalize(file) === file) {
          return fs.readFile(pth, function(err, data) {
            if (err) {
              return peer.set(responseKey, [id, false, "Bad file: " + file]);
            } else {
              console.log("Sending file: [" + id + ", true, " + (JSON.stringify(data.toString())) + "]");
              return peer.set(responseKey, [id, true, data.toString()]);
            }
          });
        } else {
          return peer.set(responseKey, [id, false, "Bad path: " + file]);
        }
      });
    }
  };

  listFiles = function(peer, _arg) {
    var id, output, responseKey;
    responseKey = _arg[0], id = _arg[1];
    output = [];
    return addFile(peer, curDir, output, function(err) {
      if (err) {
        return peer.set(responseKey, [id, false, "Error listing files"]);
      } else {
        console.log("SENDING FILE LIST: " + (JSON.stringify([id, true, output.slice(1)])));
        return peer.set(responseKey, [id, true, output.slice(1)]);
      }
    });
  };

  addFile = function(peer, file, output, block) {
    return fs.lstat(file, function(err, stats) {
      if (err) {
        return block(err);
      } else {
        output.push(file);
        if (stats.isDirectory()) {
          return fs.readdir(file, function(err, files) {
            if (err) {
              return block(err);
            } else {
              return addFiles(peer, files, output, block);
            }
          });
        } else {
          return block();
        }
      }
    });
  };

  addFiles = function(peer, files, output, block) {
    if (!files.length) {
      return block();
    } else {
      return addFile(peer, files[0], output, function(err) {
        if (err) {
          return block(err);
        } else {
          return addFiles(peer, files.slice(1), output, block);
        }
      });
    }
  };

}).call(this);
